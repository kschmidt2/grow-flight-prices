let subhead=document.getElementsByClassName("chart-subhead"),headline=document.getElementById("chart-head");if(!headline)for(var i=0;i<subhead.length;i++)subhead[i].style.fontWeight="600";Highcharts.setOptions({lang:{thousandsSep:","}}),document.addEventListener("DOMContentLoaded",function(){Highcharts.chart("chart-container",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100},title:{text:null},series:[{name:"Airfare",data:[["Monday, Nov. 25",288],["Tuesday, Nov. 26",321],["Wednesday, Nov. 27",359],["Thursday, Nov. 28",275]]}],plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{autoRotation:!1,style:{textOverflow:"none"},formatter:function(){if("Monday, Nov. 25"!==this.value){return this.value.slice(-2)}return"Nov. 25"}},tickLength:5,type:"category"},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},max:600,tickAmount:4},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valuePrefix:"$"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:15},legend:{align:"left",x:-18}}}]}}),Highcharts.chart("chart-container-2",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100},title:{text:null},series:[{name:"Airfare",data:[["Friday, Dec. 20",496],["Saturday, Dec. 21",504],["Sunday, Dec. 22",433],["Monday, Dec. 23",394],["Tuesday, Dec. 24",344],["Wednesday, Dec. 25",358]]}],plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{autoRotation:!1,style:{textOverflow:"none"},formatter:function(){if("Friday, Dec. 20"!==this.value){return this.value.slice(-2)}return"Dec. 20"}},tickLength:5,type:"category"},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},max:600,tickAmount:4},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valuePrefix:"$"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:15},legend:{align:"left",x:-18}}}]}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
